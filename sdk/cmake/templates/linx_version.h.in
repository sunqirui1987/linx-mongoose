/* linx_version.h - Linx SDK 版本信息头文件 */
/* 此文件由 CMake 自动生成，请勿手动编辑 */

#ifndef LINX_VERSION_H
#define LINX_VERSION_H

/* 版本号 */
#define LINX_VERSION_MAJOR @LINX_VERSION_MAJOR@
#define LINX_VERSION_MINOR @LINX_VERSION_MINOR@
#define LINX_VERSION_PATCH @LINX_VERSION_PATCH@

/* 版本字符串 */
#define LINX_VERSION_STRING "@LINX_VERSION_STRING@"

/* 构建信息 */
#define LINX_BUILD_DATE "@LINX_BUILD_DATE@"
#define LINX_BUILD_TIME "@LINX_BUILD_TIME@"
#define LINX_BUILD_TIMESTAMP "@LINX_BUILD_TIMESTAMP@"

/* Git 信息 */
#define LINX_GIT_HASH "@LINX_GIT_HASH@"
#define LINX_GIT_DESCRIBE "@LINX_GIT_DESCRIBE@"

/* 版本比较宏 */
#define LINX_VERSION_ENCODE(major, minor, patch) \
    (((major) << 16) | ((minor) << 8) | (patch))

#define LINX_VERSION_CODE \
    LINX_VERSION_ENCODE(LINX_VERSION_MAJOR, LINX_VERSION_MINOR, LINX_VERSION_PATCH)

#define LINX_VERSION_CHECK(major, minor, patch) \
    (LINX_VERSION_CODE >= LINX_VERSION_ENCODE(major, minor, patch))

/* 版本信息函数声明 */
#ifdef __cplusplus
extern "C" {
#endif

/**
 * 获取版本字符串
 * @return 版本字符串，格式为 "major.minor.patch"
 */
const char* linx_get_version_string(void);

/**
 * 获取版本号
 * @param major 主版本号输出指针
 * @param minor 次版本号输出指针  
 * @param patch 补丁版本号输出指针
 */
void linx_get_version(int* major, int* minor, int* patch);

/**
 * 获取构建信息
 * @return 构建信息字符串
 */
const char* linx_get_build_info(void);

/**
 * 获取 Git 信息
 * @return Git 信息字符串
 */
const char* linx_get_git_info(void);

/**
 * 检查版本兼容性
 * @param required_major 要求的主版本号
 * @param required_minor 要求的次版本号
 * @param required_patch 要求的补丁版本号
 * @return 1 如果当前版本兼容，0 如果不兼容
 */
int linx_check_version(int required_major, int required_minor, int required_patch);

#ifdef __cplusplus
}
#endif

#endif /* LINX_VERSION_H */